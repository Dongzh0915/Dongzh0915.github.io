<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C语言浅学</title>
      <link href="/2023/03/23/C%E8%AF%AD%E8%A8%80%E6%B5%85%E5%AD%A6/"/>
      <url>/2023/03/23/C%E8%AF%AD%E8%A8%80%E6%B5%85%E5%AD%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="多个函数"><a href="#多个函数" class="headerlink" title="多个函数"></a>多个函数</h1><p>截至目前，所有的程序都只使用了printf（）函数。接下来我们来演示如何把自己的函数加入程序中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/* two_func.c -- 一个文件中包含两个函数 */</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">void butler(void); /* C函数原型 */</span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;I will summon the butler function.\n&quot;);</span><br><span class="line">butler();</span><br><span class="line">printf(&quot;Yes. Bring me some tea and writeable DVDs.\n&quot;);</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">void butler(void) /* 函数定义的开始 */</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;You rang, sir?\n&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>butler()函数在程序中出现了3次。第1次是函数原型（prototype），告知编译器在程序中要使用该函数；第 2 次以函数调用（function call）的形式出现在 main()中；最后一次出现在函数定义（function definition）中，函数定义即是函数本身的源代码。</p><p>在 main()中调用 butler()很简单，写出函数名和圆括号即可。当butler()执行完毕后，程序会继续执行main()中的下一条语句。</p><h1 id="调试程序"><a href="#调试程序" class="headerlink" title="调试程序"></a>调试程序</h1><p>在我们自己编写程序的过程中，会因为粗心大意犯一些错误，程序的错误通常叫做 bug，找出并修正错误的过程叫做调试（debug）。</p><p>通常来说程序的错误主要集中在三个方面：语法错误，语义错误，程序状态。</p><p>语法错误：C语言的语法错误指的是，把有效的C符号放在错误的地方。</p><p>语义错误：在C语言中，如果遵循了C规则，但是结果不正确，那就是犯了语义错误。</p><p>Tip：编译器无法检测语义错误，因为这类错误并未违反 C语言的规则。</p><p>程序状态：程序状态是在程序的执行过程中，某给定点上所有变量值的集合。它是计算机当前状态的一个快照。</p><h1 id="关键字和保留标识符"><a href="#关键字和保留标识符" class="headerlink" title="关键字和保留标识符"></a>关键字和保留标识符</h1><p>关键字是C语言的词汇。它们对C而言比较特殊，不能用它们作为标识符（如，变量名）。许多关键字用于指定不同的类型，如 int。还有一些关键字（如，if）用于控制程序中语句的执行顺序。如下图：</p><p><img src="https://raw.githubusercontent.com/Dongzh0915/Picture/main/E%3A%5Chexo%5Cblog%5Csource%5Cimg20230323141935.png"></p><p>保留标识符包括那些以下划线字符开头的标识符和标准库函数名，如printf（）。</p><p>对C语言的了解在此篇结束，接下来开始学习C语言中的数据类型。</p>]]></content>
      
      
      <categories>
          
          <category> 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言回顾</title>
      <link href="/2023/03/18/C%E8%AF%AD%E8%A8%80%E5%9B%9E%E9%A1%BE/"/>
      <url>/2023/03/18/C%E8%AF%AD%E8%A8%80%E5%9B%9E%E9%A1%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="C语言初识"><a href="#C语言初识" class="headerlink" title="C语言初识"></a>C语言初识</h1><p>C语言属于编译型语言，所以编写C程序的过程大致可以分为7个步骤：</p><ol><li>定义程序目标</li><li>设计程序</li><li>编写代码</li><li>编译</li><li>运行程序</li><li>测试和调试程序</li><li>维护和修改程序</li></ol><p>在理想状态下，完成7个步骤即可，但在一些大型项目中，需要我们做一些重复的工作。7个步骤中，我认为最重要的是1，2两个步骤，当我们接到一个项目时，无论简单与否，不是拿起电脑就开始敲代码，而是应该确定我们这个项目的目标，这样我们才能将心无旁骛地前进；而设计程序是为了扫除项目中无关紧要的细枝末节，使得程序最大程度上得到精简。</p><p>完成以上的工作之后，我们就可以开始编写代码了，以我们最常见的Hello world.c为例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;Hello world!\n&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来就是编译的过程，编者主要使用Linux系统编写的C程序，有关编译过程可以找博客中关于命令行的编译知识。在编译过程中，编译器会检查C程序是否有效，如果发现错误，那么编译器会报告相应的错误，理解报错也是我们应当掌握的技能。</p><p>第5-7步就是得出结果和维护的过程，C程序是以能否运行为首要前提，而在此之后，我们就要对自己写的程序进行不断优化，编者相信不管什么时候都要抱有一颗学徒的心，为了使程序变得更好，剩下的步骤显得格外珍贵。</p><h1 id="C语言概述"><a href="#C语言概述" class="headerlink" title="C语言概述"></a>C语言概述</h1><p>一般来说，C程序是以.c作为文件的扩展名，以满足当前系统对文件名的要求，下面是一个简单的C程序，分块查看一个程序包含那些部分：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main(void)                           /* 一个简单的C程序 */</span><br><span class="line">&#123;</span><br><span class="line">int num;                             /* 定义一个名为num的变量 */</span><br><span class="line">num = 1;                             /* 为num赋一个值 */</span><br><span class="line"></span><br><span class="line">printf(&quot;I am a simple&quot;);             /* 使用printf()函数 */</span><br><span class="line">printf(&quot;computer.\n&quot;);</span><br><span class="line">printf(&quot;My favorite number is d% because it is first.\n&quot;,num);</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对任意一个C程序，我们都可以对它进行拆解，如下图所示：</p><p><img src="https://raw.githubusercontent.com/Dongzh0915/Picture/main/E%3A%5Chexo%5Cblog%5Csource%5Cimg20230319153816.png"></p><p>头文件和include指令本质就是在程序执行前将准备工作做完，无需赘述。</p><p>main()函数，C程序一般都是从main()函数开始执行，因为该例中没有传递任何信息，因此圆括号内是void。</p><p>&#x2F;* ………….. *&#x2F; 是程序的注释，并不会执行，写注释可以让看程序者更容易明白程序要表达的意思。</p><p>{</p><p>…</p><p>} 是标记函数体的开始和结束。</p><p>int num 表示对num这个变量进行声明，说明num是一个整数变量。</p><p>数据类型包括整数、字符和浮点数等，变量声明是一个程序的必要步骤，命名只能是字母、数字和下划线，且第一个字符必须是字母或者下划线。</p><p>\n 是换行的意思，换行符是转义序列，例如 \t 表示Tab键，\b 表示Backspace键，每一个转义序列都是以反斜()开始，以后再来细说。</p><p>d% 是一个占位符，作用是指明num值输出的位置，在语句最后要将num加上。</p><p>return 0 就是程序的结尾。</p>]]></content>
      
      
      <categories>
          
          <category> 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux命令行初识</title>
      <link href="/2023/03/17/Linux%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
      <url>/2023/03/17/Linux%E5%91%BD%E4%BB%A4%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux命令行"><a href="#Linux命令行" class="headerlink" title="Linux命令行"></a>Linux命令行</h1><p>linux系统使用时有别于windows系统，没有完美的图形界面，所以命令行成为了使用linux系统的基础。</p><p>Tips：linux系统在使用时一般使用正斜线（&#x2F;），而不是反斜线（\），linux中反斜线表示转义字符。</p><p>首先是进入控制台使用的快捷键：Ctrl+Alt+t：</p><p><img src="https://raw.githubusercontent.com/Dongzh0915/Picture/main/E%3A%5Chexo%5Cblog%5Csource%5Cimg%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230317133117.png"></p><p>进入控制台后我们就可以开始学习命令行了。</p><p>正如window中一样，我们首先要知道怎么打开一个文件夹，在linux中使用的cd命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~$cd /home                     进入名为home的目录</span><br></pre></td></tr></table></figure><p>cd命令的参数可以用两种方法表示：一种是使用绝对文件路径，另一种是使用相对文件路径。</p><p>绝对文件路径较为简单，同windows理，在执行上述代码后，~会变成&#x2F;home，这时就处于home的目录下了。若是没有配置好提示符来显示当前shell会话的绝对文件路径，可以使用pwd命令显示出来，如下图。</p><p><img src="https://raw.githubusercontent.com/Dongzh0915/Picture/main/E%3A%5Chexo%5Cblog%5Csource%5Cimg20230317142148.png"></p><p>相对文件路径是允许用户指定一个基于当前位置的目标文件路径。相对文件路径不以代表根目录的正斜线（&#x2F;）开头，而是以目录名或是一个特殊字符开始。假如位于home目录中，并希望切换到代码子目录，那么可以使用cd命令加上一个相对文件路径：</p><p><img src="https://raw.githubusercontent.com/Dongzh0915/Picture/main/E%3A%5Chexo%5Cblog%5Csource%5Cimg20230317142732.png"></p><p>上图并没有使用正斜线（&#x2F;），而是采用了相对文件路径将大大减少输入内容。</p><p>另有两个特殊字符可用于相对文件路径中</p><p>单点符（.），表示当前目录；</p><p>双点符（..），表示当前目录的父目录。</p><p>双点符在目录层级的移动时非常便利，如下图：</p><p><img src="https://raw.githubusercontent.com/Dongzh0915/Picture/main/E%3A%5Chexo%5Cblog%5Csource%5Cimg20230317143139.png"></p><p>从home目录下的代码文件夹移动到视频文件夹。</p>]]></content>
      
      
      <categories>
          
          <category> 系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/11/18/hello-world/"/>
      <url>/2022/11/18/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
