<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Linux命令行-文件与目录列表</title>
      <link href="/2023/03/26/Linux%E5%91%BD%E4%BB%A4%E8%A1%8C-%E6%96%87%E4%BB%B6%E4%B8%8E%E7%9B%AE%E5%BD%95/"/>
      <url>/2023/03/26/Linux%E5%91%BD%E4%BB%A4%E8%A1%8C-%E6%96%87%E4%BB%B6%E4%B8%8E%E7%9B%AE%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="文件与目录-ls命令"><a href="#文件与目录-ls命令" class="headerlink" title="文件与目录-ls命令"></a>文件与目录-ls命令</h1><p>上篇我们已经知道了如何遍历系统和验证当前的工作目录，接下来就可以开始探索各种目录中的文件了。</p><p>要想知道目录中有那些文件，可以使用列表命令（ls）。</p><p>ls命令最基本的形式会显示当前目录下的文件和目录，如下图所示：</p><p><img src="https://raw.githubusercontent.com/Dongzh0915/Picture/main/E%3A%5Chexo%5Cblog%5Csource%5Cimg20230326150508.png"></p><p>ls命令带上-F参数的ls命令轻松区分文件和目录。使用-F参数可以得到如下输出：</p><p><img src="https://raw.githubusercontent.com/Dongzh0915/Picture/main/E%3A%5Chexo%5Cblog%5Csource%5Cimg20230326150758.png"></p><p>基本的ls命令在某种意义上有点容易让人误解。它显示了当前目录下的文件和目录，但并没有将全部都显示出来。Linux经常采用隐藏文件来保存配置信息。在Linux上，隐藏文件通常是文件名以点号开始的文件。要把隐藏文件和普通文件及目录一起显示出来，就得用到-a参数。</p><p>ls命令中的-R参数是ls命令可用的另一个参数，叫作递归选项。它列出了当前目录下包含的子目录中的文件。如果目录很多，这个输出就会很长。如下图所示：</p><p><img src="https://raw.githubusercontent.com/Dongzh0915/Picture/main/E%3A%5Chexo%5Cblog%5Csource%5Cimg20230326151353.png"></p><p><strong>Tip：输入参数时可以不用像图片中一样，ls -F -R，可以进行合并 ls -FR。</strong></p><p>在基本的输出列表中，ls命令并未输出太多每个文件的相关信息。要显示附加信息，另一个常用的参数是-l。-l参数会产生长列表格式的输出，包含了目录中每个文件的更多相关信息。</p><p><img src="https://raw.githubusercontent.com/Dongzh0915/Picture/main/E%3A%5Chexo%5Cblog%5Csource%5Cimg20230326151751.png"></p><p>在这些相关信息中主要分为以下这些：</p><p>文件类型，比如目录（d）、文件（-）、字符型文件（c）或块设备（b）；<br>文件的权限（参见第6章）；<br>文件的硬链接总数；<br>文件属主的用户名；<br>文件属组的组名；<br>文件的大小（以字节为单位）；<br>文件的上次修改时间；<br>文件名或目录名。</p><p><strong>Tip：在shell中输入man ls 可以查看ls命令的各种参数，man命令同样适用于其他指令。</strong></p><p>前面的例子可知，默认情况下，ls命令会输出目录下的所有非隐藏文件。有时这个输出会显得过多，当你只需要查看单个少数文件信息时更是如此。ls命令还支持在命令行中定义过滤器，它会用过滤器来决定应该在输出中显示哪些文件或目录。</p><p><img src="https://raw.githubusercontent.com/Dongzh0915/Picture/main/E%3A%5Chexo%5Cblog%5Csource%5Cimg20230326152853.png"></p><p>当用户指定特定文件的名称作为过滤器时，ls命令只会显示该文件的信息。有时你可能不知道要找的那个文件的确切名称。ls命令能够识别标准通配符，并在过滤器中用它们进行模式匹配：<br>问号（?）代表一个字符；<br>星号（*）代表零个或多个字符。<br>问号可用于过滤器字符串中替代任意位置的单个字符。</p><p>在过滤器中使用星号和问号被称为文件扩展匹配（file globbing），指的是使用通配符进行模式匹配的过程。通配符正式的名称叫作元字符通配符（metacharacter wildcards）。除了星号和问号之外，还有更多的元字符通配符可用于文件扩展匹配。可以使用中括号。下面是中括号的两种用法：</p><p><img src="https://raw.githubusercontent.com/Dongzh0915/Picture/main/E%3A%5Chexo%5Cblog%5Csource%5Cimg20230326153254.png"></p><p>另外，可以使用感叹号（!）将不需要的内容排除在外。</p><p><img src="https://raw.githubusercontent.com/Dongzh0915/Picture/main/E%3A%5Chexo%5Cblog%5Csource%5Cimg20230326154001.png"></p><p><strong>Tip：在使用 (!) 时，也需要在外面加上中括号。</strong></p><h1 id="文件处理"><a href="#文件处理" class="headerlink" title="文件处理"></a>文件处理</h1><h2 id="创建文件-touch命令"><a href="#创建文件-touch命令" class="headerlink" title="创建文件-touch命令"></a>创建文件-touch命令</h2><p>我们在学习的过程时不时会遇到创建空文件的情况，这时可以使用touch命令创建空文件，注意文件的大小是0。而且touch命令还可以用来改变文件的修改时间，这个操作并不会改变文件的内容。</p><p><img src="https://raw.githubusercontent.com/Dongzh0915/Picture/main/E%3A%5Chexo%5Cblog%5Csource%5Cimg20230326155341.png"></p><p>那么touch命令与mkdir命令的区别在什么地方？</p><p>touch命令：</p><p>语法：touch [options] filename<br>           -a：改变访问时间<br>           -m：改变改动时间<br>           -t timestamp：改变访问时间和改动时间为timestamp</p><p>mkdir命令：</p><p>语法：mkdir [options] dirname<br>           -p：递归创建文件夹<br>           -mmode：新建文件夹，并设置文件夹的文件访问模式为mode</p><p>总结来说，一个是创建文件，一个是创建文件夹。</p><h2 id="复制文件-cp命令"><a href="#复制文件-cp命令" class="headerlink" title="复制文件-cp命令"></a>复制文件-cp命令</h2><p>在最基本的用法里，cp命令需要两个参数——源对象和目标对象：<br>cp source destination<br>当source和destination参数都是文件名时，cp命令将源文件复制成一个新文件，并且以destination命名。新文件就像全新的文件一样，有新的修改时间。</p><p><strong>Tip：如果目标文件已经存在，cp命令可能并不会提醒这一点。最好是加上-i选项，强制shell询问是否需要覆盖已有文件。</strong></p><p><img src="https://raw.githubusercontent.com/Dongzh0915/Picture/main/E%3A%5Chexo%5Cblog%5Csource%5Cimg20230327131534.png"></p><p>另外，cp命令的-R参数威力强大。可以用它在一条命令中递归地复制整个目录的内容。</p><p><img src="https://raw.githubusercontent.com/Dongzh0915/Picture/main/E%3A%5Chexo%5Cblog%5Csource%5Cimg20230327131921.png"></p><p><strong>Tip：cp命令中也可以使用通配符，除了单点符和通配符之外，还可以使用shell的另一特性，那就是制表键自动补全。</strong></p><h2 id="制表键自动补全"><a href="#制表键自动补全" class="headerlink" title="制表键自动补全"></a>制表键自动补全</h2><p>在我们日常使用命令行时，由于繁多且复杂，很容易输错命令、目录名和文件名，这正是制表键自动补全挺身而出的时候。制表键自动补全允许你在输入文件名或目录名时按一下制表键，让shell帮忙将内容补充完整。</p><p><strong>Tip：使用制表键自动补全的的技巧在于要给shell足够的文件名信息，使其能够将需要文件同其他<br>文件区分开。假如有另一个文件名也是以really开头，那么就算按了制表键，也无法完成文件名<br>的自动补全。这时候你会听到嘟的一声。要是再按一下制表键，shell就会列出所有以really开头的<br>文件名。这个特性可以让你观察究竟应该输入哪些内容才能完成自动补全。</strong></p><h2 id="链接文件"><a href="#链接文件" class="headerlink" title="链接文件"></a>链接文件</h2><p>链接文件是Linux文件系统的一个优势。如需要在系统上维护同一文件的两份或多份副本，除了保存多份单独的物理文件副本之外，还可以采用保存一份物理文件副本和多个虚拟副本的方法。这种虚拟的副本就称为链接。链接是目录中指向文件真实位置的占位符。在Linux中有两种不同类型的文件链接：<br><strong>符号链接：ln -s filename</strong><br><strong>硬链接：ln filename</strong></p><p>符号链接就是一个实实在在的文件，它指向存放在虚拟目录结构中某个地方的另一个文件。这两个通过符号链接在一起的文件，彼此的内容并不相同。</p><p>硬链接会创建独立的虚拟文件，其中包含了原始文件的信息及位置。但是它们从根本上而言是同一个文件。</p><p>符号链接类似于C语言的指针！若是想要验证是否为不同的文件，可以使用 ls -i 命令查看incode编号。</p><p><strong>Tip：复制链接文件的时候，产生的是源文件的副本，容易弄混乱，不如创建源文件的另一个链接，一个源文件可以有多个链接，千万不要创建软链接的软链接，容易造成断裂。</strong></p><h2 id="重命名文件"><a href="#重命名文件" class="headerlink" title="重命名文件"></a>重命名文件</h2><p>在Linux中，重命名文件称为移动。mv命令可以将文件和目录移动到另一个位置或重新命名。</p><p>​                               <img src="https://raw.githubusercontent.com/Dongzh0915/Picture/main/E%3A%5Chexo%5Cblog%5Csource%5Cimg20230327134310.png"></p><p><strong>Tip：移动文件会将文件名进行更改，但inode编号和时间戳保持不变。这是因为mv只影响文件名。</strong></p><p><img src="https://raw.githubusercontent.com/Dongzh0915/Picture/main/E%3A%5Chexo%5Cblog%5Csource%5Cimg20230327135136.png"></p><p>我们可以看到在重命名目录之后，原来的目录名已经不存在了。</p><h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><p>在Linux中，删除（deleting）叫作移除（removing）①。bash shell中删除文件的命令是rm。rm命令的基本格式非常简单。</p><p><strong>rm -i filename</strong></p><p><strong>Tip：-i命令参数提示你是不是要真的删除该文件。ubuntu中虽然有回收站或垃圾箱，但是，在使用rm命令时，我们仍要养成总是加入-i参数的好习惯。</strong></p><p>rm命令的另外一个特性是，如果要删除很多文件且不受提示符的打扰，可以用-f参数强制删除。</p><p>下篇将介绍mkdir命令的使用场景–目录。</p>]]></content>
      
      
      <categories>
          
          <category> 系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言浅学</title>
      <link href="/2023/03/23/C%E8%AF%AD%E8%A8%80%E6%B5%85%E5%AD%A6/"/>
      <url>/2023/03/23/C%E8%AF%AD%E8%A8%80%E6%B5%85%E5%AD%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="多个函数"><a href="#多个函数" class="headerlink" title="多个函数"></a>多个函数</h1><p>截至目前，所有的程序都只使用了printf（）函数。接下来我们来演示如何把自己的函数加入程序中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/* two_func.c -- 一个文件中包含两个函数 */</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">void butler(void); /* C函数原型 */</span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;I will summon the butler function.\n&quot;);</span><br><span class="line">butler();</span><br><span class="line">printf(&quot;Yes. Bring me some tea and writeable DVDs.\n&quot;);</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">void butler(void) /* 函数定义的开始 */</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;You rang, sir?\n&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>butler()函数在程序中出现了3次。第1次是函数原型（prototype），告知编译器在程序中要使用该函数；第 2 次以函数调用（function call）的形式出现在 main()中；最后一次出现在函数定义（function definition）中，函数定义即是函数本身的源代码。</p><p>在 main()中调用 butler()很简单，写出函数名和圆括号即可。当butler()执行完毕后，程序会继续执行main()中的下一条语句。</p><h1 id="调试程序"><a href="#调试程序" class="headerlink" title="调试程序"></a>调试程序</h1><p>在我们自己编写程序的过程中，会因为粗心大意犯一些错误，程序的错误通常叫做 bug，找出并修正错误的过程叫做调试（debug）。</p><p>通常来说程序的错误主要集中在三个方面：语法错误，语义错误，程序状态。</p><p>语法错误：C语言的语法错误指的是，把有效的C符号放在错误的地方。</p><p>语义错误：在C语言中，如果遵循了C规则，但是结果不正确，那就是犯了语义错误。</p><p>Tip：编译器无法检测语义错误，因为这类错误并未违反 C语言的规则。</p><p>程序状态：程序状态是在程序的执行过程中，某给定点上所有变量值的集合。它是计算机当前状态的一个快照。</p><h1 id="关键字和保留标识符"><a href="#关键字和保留标识符" class="headerlink" title="关键字和保留标识符"></a>关键字和保留标识符</h1><p>关键字是C语言的词汇。它们对C而言比较特殊，不能用它们作为标识符（如，变量名）。许多关键字用于指定不同的类型，如 int。还有一些关键字（如，if）用于控制程序中语句的执行顺序。如下图：</p><p><img src="https://raw.githubusercontent.com/Dongzh0915/Picture/main/E%3A%5Chexo%5Cblog%5Csource%5Cimg20230323141935.png"></p><p>保留标识符包括那些以下划线字符开头的标识符和标准库函数名，如printf（）。</p><p>对C语言的了解在此篇结束，接下来开始学习C语言中的数据类型。</p>]]></content>
      
      
      <categories>
          
          <category> 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言回顾</title>
      <link href="/2023/03/18/C%E8%AF%AD%E8%A8%80%E5%9B%9E%E9%A1%BE/"/>
      <url>/2023/03/18/C%E8%AF%AD%E8%A8%80%E5%9B%9E%E9%A1%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="C语言初识"><a href="#C语言初识" class="headerlink" title="C语言初识"></a>C语言初识</h1><p>C语言属于编译型语言，所以编写C程序的过程大致可以分为7个步骤：</p><ol><li>定义程序目标</li><li>设计程序</li><li>编写代码</li><li>编译</li><li>运行程序</li><li>测试和调试程序</li><li>维护和修改程序</li></ol><p>在理想状态下，完成7个步骤即可，但在一些大型项目中，需要我们做一些重复的工作。7个步骤中，我认为最重要的是1，2两个步骤，当我们接到一个项目时，无论简单与否，不是拿起电脑就开始敲代码，而是应该确定我们这个项目的目标，这样我们才能将心无旁骛地前进；而设计程序是为了扫除项目中无关紧要的细枝末节，使得程序最大程度上得到精简。</p><p>完成以上的工作之后，我们就可以开始编写代码了，以我们最常见的Hello world.c为例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;Hello world!\n&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来就是编译的过程，编者主要使用Linux系统编写的C程序，有关编译过程可以找博客中关于命令行的编译知识。在编译过程中，编译器会检查C程序是否有效，如果发现错误，那么编译器会报告相应的错误，理解报错也是我们应当掌握的技能。</p><p>第5-7步就是得出结果和维护的过程，C程序是以能否运行为首要前提，而在此之后，我们就要对自己写的程序进行不断优化，编者相信不管什么时候都要抱有一颗学徒的心，为了使程序变得更好，剩下的步骤显得格外珍贵。</p><h1 id="C语言概述"><a href="#C语言概述" class="headerlink" title="C语言概述"></a>C语言概述</h1><p>一般来说，C程序是以.c作为文件的扩展名，以满足当前系统对文件名的要求，下面是一个简单的C程序，分块查看一个程序包含那些部分：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main(void)                           /* 一个简单的C程序 */</span><br><span class="line">&#123;</span><br><span class="line">int num;                             /* 定义一个名为num的变量 */</span><br><span class="line">num = 1;                             /* 为num赋一个值 */</span><br><span class="line"></span><br><span class="line">printf(&quot;I am a simple&quot;);             /* 使用printf()函数 */</span><br><span class="line">printf(&quot;computer.\n&quot;);</span><br><span class="line">printf(&quot;My favorite number is d% because it is first.\n&quot;,num);</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对任意一个C程序，我们都可以对它进行拆解，如下图所示：</p><p><img src="https://raw.githubusercontent.com/Dongzh0915/Picture/main/E%3A%5Chexo%5Cblog%5Csource%5Cimg20230319153816.png"></p><p>头文件和include指令本质就是在程序执行前将准备工作做完，无需赘述。</p><p>main()函数，C程序一般都是从main()函数开始执行，因为该例中没有传递任何信息，因此圆括号内是void。</p><p>&#x2F;* ………….. *&#x2F; 是程序的注释，并不会执行，写注释可以让看程序者更容易明白程序要表达的意思。</p><p>{</p><p>…</p><p>} 是标记函数体的开始和结束。</p><p>int num 表示对num这个变量进行声明，说明num是一个整数变量。</p><p>数据类型包括整数、字符和浮点数等，变量声明是一个程序的必要步骤，命名只能是字母、数字和下划线，且第一个字符必须是字母或者下划线。</p><p>\n 是换行的意思，换行符是转义序列，例如 \t 表示Tab键，\b 表示Backspace键，每一个转义序列都是以反斜()开始，以后再来细说。</p><p>d% 是一个占位符，作用是指明num值输出的位置，在语句最后要将num加上。</p><p>return 0 就是程序的结尾。</p>]]></content>
      
      
      <categories>
          
          <category> 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux命令行初识</title>
      <link href="/2023/03/17/Linux%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
      <url>/2023/03/17/Linux%E5%91%BD%E4%BB%A4%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux命令行"><a href="#Linux命令行" class="headerlink" title="Linux命令行"></a>Linux命令行</h1><p>linux系统使用时有别于windows系统，没有完美的图形界面，所以命令行成为了使用linux系统的基础。</p><p>Tips：linux系统在使用时一般使用正斜线（&#x2F;），而不是反斜线（\），linux中反斜线表示转义字符。</p><p>首先是进入控制台使用的快捷键：Ctrl+Alt+t：</p><p><img src="https://raw.githubusercontent.com/Dongzh0915/Picture/main/E%3A%5Chexo%5Cblog%5Csource%5Cimg%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230317133117.png"></p><p>进入控制台后我们就可以开始学习命令行了。</p><p>正如window中一样，我们首先要知道怎么打开一个文件夹，在linux中使用的cd命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~$cd /home                     进入名为home的目录</span><br></pre></td></tr></table></figure><p>cd命令的参数可以用两种方法表示：一种是使用绝对文件路径，另一种是使用相对文件路径。</p><p>绝对文件路径较为简单，同windows理，在执行上述代码后，~会变成&#x2F;home，这时就处于home的目录下了。若是没有配置好提示符来显示当前shell会话的绝对文件路径，可以使用pwd命令显示出来，如下图。</p><p><img src="https://raw.githubusercontent.com/Dongzh0915/Picture/main/E%3A%5Chexo%5Cblog%5Csource%5Cimg20230317142148.png"></p><p>相对文件路径是允许用户指定一个基于当前位置的目标文件路径。相对文件路径不以代表根目录的正斜线（&#x2F;）开头，而是以目录名或是一个特殊字符开始。假如位于home目录中，并希望切换到代码子目录，那么可以使用cd命令加上一个相对文件路径：</p><p><img src="https://raw.githubusercontent.com/Dongzh0915/Picture/main/E%3A%5Chexo%5Cblog%5Csource%5Cimg20230317142732.png"></p><p>上图并没有使用正斜线（&#x2F;），而是采用了相对文件路径将大大减少输入内容。</p><p>另有两个特殊字符可用于相对文件路径中</p><p>单点符（.），表示当前目录；</p><p>双点符（..），表示当前目录的父目录。</p><p>双点符在目录层级的移动时非常便利，如下图：</p><p><img src="https://raw.githubusercontent.com/Dongzh0915/Picture/main/E%3A%5Chexo%5Cblog%5Csource%5Cimg20230317143139.png"></p><p>从home目录下的代码文件夹移动到视频文件夹。</p>]]></content>
      
      
      <categories>
          
          <category> 系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/11/18/hello-world/"/>
      <url>/2022/11/18/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
